INC_DIR   := include
SRC_DIR   := src
LIB_DIR	  := lib
OBJ_DIR   := obj
BUILD_DIR := build

EXE 	:= ${BUILD_DIR}/main.out
TARGET_LIB 	:= libhello.so
SRC 		:= $(wildcard $(SRC_DIR)/*.c)
OBJ 		:= $(SRC:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)

CPPFLAGS := -I${INC_DIR} -MMD -MP
CFLAGS   := -Wall -Wextra -O2 -g
LDFLAGS  := -L${LIB_DIR}
LDLIBS   := # Left empty if no libs are needed, otherwiese like `-lm -lboost`

# `all`, `clean` is not real target that needs to be created file/folder
.PHONY: all clean

all: $(EXE)

lib: ${TARGET_LIB}

# linking phase
$(EXE): $(OBJ) | $(BUILD_DIR)
	$(CC) $(LDFLAGS) $(LDLIBS) $^ -o $@

${TARGET_LIB}: $(OBJ) | $(BUILD_DIR)
	$(CC) -shared -fPIC $(LDFLAGS) $(LDLIBS) $^ -o $@
	mv $@ $(BUILD_DIR) #hack to remove `build` prefix in `build/libhello.so`

# compiling phase
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c | $(OBJ_DIR)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

$(BUILD_DIR) $(OBJ_DIR):
	mkdir -p $@

clean:
	@$(RM) -rv $(BUILD_DIR) $(OBJ_DIR)	# The @ disables the echoing of the command

-include $(OBJ:.o=.d)					# The dash is used to silence errors if the files don't exist yet